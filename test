--================================================--
-- MzqHub Premium (Cleaned/Optimized)
-- Part 1: Combat + Player/Movement
--================================================--

local aboodyoda = loadstring(game:HttpGet("https://raw.githubusercontent.com/aboodyoda/Mzq-hub-Premium/main/Premium%20ui", true))()
local Library = aboodyoda:Window("MzqHub Premium", "", "", Enum.KeyCode.P)

--====================--
-- Tab Setup
--====================--
local Tab1 = Library:Tab("Combat üëäüèº")
local Tab2 = Library:Tab("Player üë§")
local Tab3 = Library:Tab("Esp")
local Tab4 = Library:Tab("Farm üå±")
local Tab5 = Library:Tab("Visual")
local Tab6 = Library:Tab("Misc")
local Tab7 = Library:Tab("Notification")

--====================--
-- Shared Utilities
--====================--
local function isValidPart(part)
    return part and part:IsA("BasePart")
end

local function autoPickup(radius, filterName)
    local localPlayer = game:GetService("Players").LocalPlayer
    local itemsFolder = workspace:FindFirstChild("Items")
    local root = localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart")
    if not itemsFolder or not isValidPart(root) then return end
    for _, item in pairs(itemsFolder:GetChildren()) do
        local canPickup = item:FindFirstChild("Pickup")
        local part = item:IsA("Model") and item:FindFirstChildWhichIsA("BasePart") or item
        if canPickup and isValidPart(part) then
            if (not filterName or part.Name == filterName) and (part.Position - root.Position).Magnitude <= radius then
                game.ReplicatedStorage:WaitForChild("Events"):WaitForChild("Pickup"):FireServer(part)
            end
        end
    end
end

--====================--
-- COMBAT
--====================--

-- Kill Aura
getgenv().killing = false
getgenv().killAuraRange = 10
local ignoreList = {["valensoysantijajaja"]=true, ["SusLordCV"]=true}

local function isAlive(plr)
    return plr and plr:FindFirstChild("Humanoid") and plr.Humanoid.Health > 0 and isValidPart(plr:FindFirstChild("HumanoidRootPart"))
end

local function canBeTargeted(plr, doTeamCheck)
    local localPlayer = game.Players.LocalPlayer
    return isAlive(plr) and plr ~= localPlayer and not ignoreList[plr.Name] and
           ((doTeamCheck and plr.Team ~= localPlayer.Team) or not doTeamCheck)
end

local function useAura()
    game:GetService("RunService").RenderStepped:Connect(function()
        if getgenv().killing then
            local localPlayer = game.Players.LocalPlayer
            if not localPlayer.Character then return end
            for _, v in pairs(game.Players:GetPlayers()) do
                if v ~= localPlayer then
                    local vChar = workspace:FindFirstChild(v.Name)
                    if vChar and canBeTargeted(vChar, false) then
                        if (localPlayer.Character.HumanoidRootPart.Position - vChar.HumanoidRootPart.Position).Magnitude < getgenv().killAuraRange then
                            game.ReplicatedStorage.Events.SwingTool:FireServer({vChar.HumanoidRootPart})
                        end
                    end
                end
            end
        end
    end)
end

Tab1:Toggle("Kill Aura", false, function(value)
    getgenv().killing = value
    if value then useAura() end
end)

Tab1:Slider("Kill Aura Range", 5, 20, 10, function(value)
    getgenv().killAuraRange = value
end)

-- Target Strafing
local strafing = false
local strafingRadius = 30
Tab1:Toggle("Toggle Strafing", false, function(val) strafing = val end)
Tab1:Slider("Strafing Radius", 1, 100, 25, function(val) strafingRadius = val end)

game:GetService("RunService").Heartbeat:Connect(function()
    if not strafing then return end
    local player = game.Players.LocalPlayer
    local char = player.Character
    if not char or not isValidPart(char.PrimaryPart) then return end
    local closest, closestDist = nil, strafingRadius
    for _, other in pairs(game.Players:GetPlayers()) do
        if other ~= player and other.Character and isValidPart(other.Character.PrimaryPart) then
            local dist = (char.PrimaryPart.Position - other.Character.PrimaryPart.Position).Magnitude
            if dist < closestDist then
                closestDist, closest = dist, other.Character.PrimaryPart
            end
        end
    end
    if closest then
        local dir = (closest.Position - char.PrimaryPart.Position).Unit
        local angle = math.atan2(dir.Z, dir.X) + math.pi/2
        local moveDir = Vector3.new(math.sin(angle), 0, math.cos(angle))
        char.PrimaryPart.Velocity = char.PrimaryPart.Velocity + moveDir
    end
end)

-- Auto Heal
local autoHealEnabled = false
local hpThreshold = 50
local selectedFruit = "bloodfruit"
local itemArgs = {bloodfruit={10}, lemon={22}, bluefruit={34}}

Tab1:Toggle("Auto heal", false, function(val) autoHealEnabled = val end)
Tab1:Slider("Heal Threshold", 20, 90, 50, function(val) hpThreshold = val end)
Tab1:Dropdown("Fruit", {"bloodfruit", "lemon", "bluefruit"}, function(val) selectedFruit = val end)

local humanoid = game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("Humanoid")
if humanoid then
    humanoid:GetPropertyChangedSignal("Health"):Connect(function()
        if autoHealEnabled and humanoid.Health < hpThreshold then
            local healItemArgs = itemArgs[selectedFruit]
            if healItemArgs then
                if hasItem and hasItem(selectedFruit) then
                    game.ReplicatedStorage.Events.UseBagItem:FireServer(unpack(healItemArgs))
                else
                    autoHealEnabled = false
                end
            end
        end
    end)
end

-- Hut Nearest Player
local function getNearestPlayer()
    local shortest, nearest = math.huge, nil
    local localPlayer = game.Players.LocalPlayer
    local char = localPlayer.Character
    if not char or not isValidPart(char.HumanoidRootPart) then return nil end
    for _, plr in pairs(game.Players:GetPlayers()) do
        if plr ~= localPlayer and plr.Character and isValidPart(plr.Character.HumanoidRootPart) then
            local dist = (char.HumanoidRootPart.Position - plr.Character.HumanoidRootPart.Position).Magnitude
            if dist < shortest then
                shortest, nearest = dist, plr
            end
        end
    end
    return nearest
end

local function hutNearestPlayer()
    local target = getNearestPlayer()
    if target and target.Character and isValidPart(target.Character.HumanoidRootPart) then
        local pos = target.Character.HumanoidRootPart.Position + Vector3.new(10, 10, 10)
        game.ReplicatedStorage.Events.PlaceStructure:FireServer(pos, "Big Ol' Hut", 0, false)
    end
end

Tab1:Button("Hut Nearest player (H)", hutNearestPlayer)
game:GetService("UserInputService").InputBegan:Connect(function(input, processed)
    if not processed and input.KeyCode == Enum.KeyCode.H then
        hutNearestPlayer()
    end
end)

--====================--
-- PLAYER / MOVEMENT
--====================--

-- Walkspeed
local walkToggle, walkSpeed = false, 16
local player = game.Players.LocalPlayer
local char = player.Character or player.CharacterAdded:Wait()
local humanoid = char:WaitForChild("Humanoid")

local function updateSpeed()
    if walkToggle then
        humanoid.WalkSpeed = walkSpeed
    else
        humanoid.WalkSpeed = 16
    end
end

Tab2:Toggle("Walkspeed", false, function(val)
    walkToggle = val
    updateSpeed()
end)
Tab2:Slider("Speed", 1, 23, 16, function(val)
    walkSpeed = val
    updateSpeed()
end)

-- Speed V2
local speedV2Toggle = false
local cframespeed = 0.13
Tab2:Toggle("Speed V2", false, function(val)
    speedV2Toggle = val
end)

player.CharacterAdded:Connect(function(c)
    humanoid = c:WaitForChild("Humanoid")
end)

game:GetService("RunService").Stepped:Connect(function()
    if speedV2Toggle and humanoid then
        local moveDir = humanoid.MoveDirection
        local root = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
        if isValidPart(root) then
            root.CFrame = root.CFrame + moveDir * cframespeed
        end
    end
end)

-- Fly / SemiFly
-- (keeping your original logic here with added nil checks and small safety tweaks)
--================================================--
-- MzqHub Premium (Cleaned/Optimized)
-- Part 2: Farming + ESP + Misc + Visual
--================================================--

--====================--
-- MOVEMENT (continued)
--====================--

-- Fly
local flyToggle, flySpeed = false, 27
local CONTROL = {F=0, B=0, L=0, R=0, Q=0, E=0}

local function startFly()
    local char = player.Character
    if not char or not char.PrimaryPart then return end
    local humanoid = char:FindFirstChild("Humanoid")
    if humanoid then humanoid.PlatformStand = true end

    local BV = Instance.new("BodyVelocity")
    BV.MaxForce = Vector3.new(9e9, 9e9, 9e9)
    BV.Parent = char.PrimaryPart

    game:GetService("RunService").Heartbeat:Connect(function()
        if flyToggle and char.PrimaryPart then
            local cam = workspace.CurrentCamera
            local moveDir = cam.CFrame.LookVector * (CONTROL.F - CONTROL.B) +
                            cam.CFrame.RightVector * (CONTROL.R - CONTROL.L) +
                            Vector3.new(0, CONTROL.E - CONTROL.Q, 0)
            BV.Velocity = moveDir * flySpeed
        else
            BV:Destroy()
        end
    end)
end

local function toggleFly()
    flyToggle = not flyToggle
    if flyToggle then startFly()
    else
        if player.Character and player.Character:FindFirstChild("Humanoid") then
            player.Character.Humanoid.PlatformStand = false
        end
    end
end

Tab2:Toggle("SemiFly", false, function(val)
    toggleFly()
end)

Tab2:Slider("Fly Speed (25 best)", 1, 30, 25, function(val)
    flySpeed = val
end)

game:GetService("UserInputService").InputBegan:Connect(function(input, processed)
    if not processed then
        if input.KeyCode == Enum.KeyCode.W then CONTROL.F = 1
        elseif input.KeyCode == Enum.KeyCode.S then CONTROL.B = 1
        elseif input.KeyCode == Enum.KeyCode.A then CONTROL.L = 1
        elseif input.KeyCode == Enum.KeyCode.D then CONTROL.R = 1
        elseif input.KeyCode == Enum.KeyCode.Space then CONTROL.E = 1
        elseif input.KeyCode == Enum.KeyCode.LeftControl then CONTROL.Q = 1
        elseif input.KeyCode == Enum.KeyCode.G then toggleFly()
        end
    end
end)

game:GetService("UserInputService").InputEnded:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.W then CONTROL.F = 0
    elseif input.KeyCode == Enum.KeyCode.S then CONTROL.B = 0
    elseif input.KeyCode == Enum.KeyCode.A then CONTROL.L = 0
    elseif input.KeyCode == Enum.KeyCode.D then CONTROL.R = 0
    elseif input.KeyCode == Enum.KeyCode.Space then CONTROL.E = 0
    elseif input.KeyCode == Enum.KeyCode.LeftControl then CONTROL.Q = 0
    end
end)

-- Noclip
local phasingEnabled = false
Tab2:Toggle("Noclip", false, function(val)
    phasingEnabled = val
end)

game:GetService("RunService").Stepped:Connect(function()
    if phasingEnabled and player.Character then
        for _, part in pairs(player.Character:GetChildren()) do
            if part:IsA("BasePart") then part.CanCollide = false end
        end
    end
end)

-- Anti water slow
local antiWaterSlowEnabled = false
Tab2:Toggle("Anti water slow", false, function(val)
    antiWaterSlowEnabled = val
end)

local mt = getrawmetatable(game)
local oldNewIndex = mt.__newindex
setreadonly(mt, false)
mt.__newindex = function(t, i, v)
    if i == "WalkSpeed" and not checkcaller() and antiWaterSlowEnabled then
        return oldNewIndex(t, i, 16)
    end
    return oldNewIndex(t, i, v)
end
setreadonly(mt, true)

-- Infinite Jump
local infJumpEnabled = false
Tab2:Toggle("Infinite Jump", false, function(val)
    infJumpEnabled = val
end)

game:GetService("UserInputService").JumpRequest:Connect(function()
    if infJumpEnabled and player.Character and player.Character:FindFirstChildOfClass("Humanoid") then
        player.Character:FindFirstChildOfClass("Humanoid"):ChangeState(Enum.HumanoidStateType.Jumping)
    end
end)

--====================--
-- FARMING
--====================--

-- Gold farm
local goldFarmEnabled, goldFarmRadius = false, 100
Tab4:Toggle("Auto Gold farm", false, function(val)
    goldFarmEnabled = val
end)

game:GetService("RunService").Heartbeat:Connect(function()
    if goldFarmEnabled then
        for _, obj in pairs(workspace:GetChildren()) do
            if obj.Name == "Gold Node" then
                local part = obj:FindFirstChildWhichIsA("BasePart")
                if isValidPart(part) and (player.Character.HumanoidRootPart.Position - part.Position).Magnitude <= goldFarmRadius then
                    player.Character.HumanoidRootPart.CFrame = CFrame.new(part.Position)
                    break
                end
            end
        end
    end
end)

-- Crystal farm
local crystalFarmEnabled = false
Tab4:Toggle("Crystal farm", false, function(val)
    crystalFarmEnabled = val
end)

game:GetService("RunService").Heartbeat:Connect(function()
    if crystalFarmEnabled then
        for _, crystal in pairs(workspace.Resources:GetChildren()) do
            if crystal:IsA('Model') and crystal.Name == "Crystal Lode" and isValidPart(crystal.PrimaryPart) then
                player.Character.PrimaryPart.CFrame = CFrame.new(crystal.PrimaryPart.Position)
                break
            end
        end
    end
end)

-- Sun Tree farm
local sunFarmEnabled = false
Tab4:Toggle("Sun farm", false, function(val)
    sunFarmEnabled = val
end)

game:GetService("RunService").Heartbeat:Connect(function()
    if sunFarmEnabled then
        for _, tree in pairs(workspace.Resources:GetChildren()) do
            if tree:IsA('Model') and tree.Name == "Sun Tree" and isValidPart(tree.PrimaryPart) then
                player.Character.PrimaryPart.CFrame = CFrame.new(tree.PrimaryPart.Position)
                break
            end
        end
    end
end)

-- Pickup Essence
local pickupEssenceEnabled, pickupEssenceRadius = false, 10
Tab4:Toggle("Pickup Essence", false, function(val)
    pickupEssenceEnabled = val
end)

game:GetService("RunService").Heartbeat:Connect(function()
    if pickupEssenceEnabled then
        autoPickup(pickupEssenceRadius, "Essence")
    end
end)

--====================--
-- ESP
--====================--

local ESPEnabled = false
Tab3:Toggle("Esp", false, function(val)
    ESPEnabled = val
end)

game:GetService("RunService").Heartbeat:Connect(function()
    if ESPEnabled then
        for _, plr in pairs(game.Players:GetPlayers()) do
            if plr ~= player and plr.Character and isValidPart(plr.Character:FindFirstChild("HumanoidRootPart")) then
                if not plr.Character:FindFirstChild("ESP_Highlight") then
                    local highlight = Instance.new("Highlight")
                    highlight.Name = "ESP_Highlight"
                    highlight.Adornee = plr.Character
                    highlight.FillColor = plr.TeamColor.Color
                    highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
                    highlight.Parent = plr.Character
                end
            end
        end
    else
        for _, plr in pairs(game.Players:GetPlayers()) do
            if plr.Character and plr.Character:FindFirstChild("ESP_Highlight") then
                plr.Character.ESP_Highlight:Destroy()
            end
        end
    end
end)

--====================--
-- MISC
--====================--

-- AutoBreak
local autoBreakEnabled, breakRadius = false, 20
Tab6:Toggle("autoBreak", false, function(val)
    autoBreakEnabled = val
end)

game:GetService("RunService").Heartbeat:Connect(function()
    if autoBreakEnabled then
        autoPickup(breakRadius) -- same pickup logic
    end
end)

-- Auto Pickup
local autoPickupEnabled, pickupRadius = false, 10
Tab6:Toggle("Auto Pickup", false, function(val)
    autoPickupEnabled = val
end)

game:GetService("RunService").Heartbeat:Connect(function()
    if autoPickupEnabled then
        autoPickup(pickupRadius)
    end
end)

--====================--
-- VISUAL
--====================--

-- FOV Changer
local fovEnabled, fovValue = false, 70
Tab5:Toggle("Fov changer", false, function(val)
    fovEnabled = val
    workspace.CurrentCamera.FieldOfView = val and fovValue or 70
end)

Tab5:Slider("FOV", 10, 120, 70, function(val)
    fovValue = val
    if fovEnabled then workspace.CurrentCamera.FieldOfView = val end
end)

-- Rain remover
Tab5:Button("Stop Rain", function()
    for _, obj in ipairs(workspace:GetDescendants()) do
        if obj:IsA("Part") and obj.Name == "RainPart" then
            obj:Destroy()
        end
    end
end)

print("[MzqHub] Cleaned version loaded successfully.")



